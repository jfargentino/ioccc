static inline uint32_t xOr(uint32_t*x,int y){return y?('^'^'^')[x]=('^'^'^')[x]>>y^xOr(x,'^'^'^'):('^'^'^')[x];}
static ///*****************************************************************************************************/
inline ///****************************************************************************************************/
uint32_t /***************************************************************************************************/
x0r /**///**************************************************************************************************/
 ( /***///*************************************************************************************************/
uint32_t /************************************************************************************************/
 * /***///***********************************************************************************************/
 x /***///**********************************************************************************************/
 , /***///*********************************************************************************************/
int /**///********************************************************************************************/
 y /***///*******************************************************************************************/
 ) /***///******************************************************************************************/
 { /***///*****************************************************************************************/
return ///****************************************************************************************/
 y /*********************************************************************************************/
 ? /********************************************************************************************/
 ( /*******************************************************************************************/
'^' /*****************************************************************************************/
 ^ /*****************************************************************************************/
'^' /***************************************************************************************/
 ) /***************************************************************************************/
 [ /**************************************************************************************/
 x /*************************************************************************************/
 ] /************************************************************************************/
 = /***********************************************************************************/
 ( /**********************************************************************************/
'^' /********************************************************************************/
 ^ /********************************************************************************/
'^' /******************************************************************************/
 ) /******************************************************************************/
 [ /*****************************************************************************/
 x /****************************************************************************/
 ] /***************************************************************************/
<< /**************************************************************************/
 y /*************************************************************************/
 ^ /************************************************************************/
x0r /**********************************************************************/
 ( /**********************************************************************/
 x /*********************************************************************/
 , /********************************************************************/
'^' /******************************************************************/
 ^ /******************************************************************/
'^' /****************************************************************/
 ) /****************************************************************/
 : /***************************************************************/
 ( /**************************************************************/
'^' /************************************************************/
 ^ /************************************************************/
'^' /**********************************************************/
 ) /**********************************************************/
 [ /*********************************************************/
 x /********************************************************/
 ] /*******************************************************/
 ; /******************************************************/
 } /*****************************************************/



//static uint32_t seed[4] = { 123456789u, 362436069u,
//                                521288629u, 88675123u };
//    unsigned int const abc[4] = { 20, 11, 27, 6 };

   static
   inline
 uint32_t           ___              (
 uint32_t            * sid           ,
 unsigned  int const * abc           ,
 unsigned  int         xyz)          {
 uint32_t k_sid_ =          '^'^'^'  ;
 unsigned  int k =          '^'^'^'  ;
  while ( k      <   xyz  - '/'/'/') {
	  k_sid_^= k      & '/'/'/'
	? k[sid] ^ k[sid] >> k[abc] 
	: k[sid] ^ k[sid] << k[abc]  ;
	  k[sid] =   sid[ ++ k    ]  ;
	} k_sid_^= k      & '/'/'/'
	? k[sid] ^ k[sid] >> k[abc] 
	: k[sid] ^ k[sid] << k[abc]  ;
	  k[sid] = k_sid_;
	  return   k[sid];           }
